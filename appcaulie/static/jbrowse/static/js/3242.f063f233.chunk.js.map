{"version":3,"file":"static/js/3242.f063f233.chunk.js","mappings":"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","sources":["../../../plugins/alignments/src/AlignmentsFeatureDetail/util.ts","../../../plugins/alignments/src/AlignmentsFeatureDetail/AlignmentsFeatureSuppAligns.tsx","../../../plugins/alignments/src/AlignmentsFeatureDetail/AlignmentsFeatureFlags.tsx","../../../plugins/alignments/src/AlignmentsFeatureDetail/AlignmentsFeatureDetail.tsx"],"sourcesContent":["import { getSession } from '@jbrowse/core/util'\nimport { IAnyStateTreeNode } from 'mobx-state-tree'\n\nexport function getTag(\n  tag: string,\n  feat: {\n    tags?: { [key: string]: unknown }\n    [key: string]: unknown\n  },\n) {\n  return feat.tags?.[tag] || feat[tag]\n}\n\nexport async function navToLoc(locString: string, model: IAnyStateTreeNode) {\n  const session = getSession(model)\n  const { view } = model\n  try {\n    if (view) {\n      await view.navToLocString(locString)\n    } else {\n      throw new Error('No view associated with this view anymore')\n    }\n  } catch (e) {\n    console.error(e)\n    session.notify(`${e}`)\n  }\n}\n","import React from 'react'\nimport { Typography, Link } from '@mui/material'\nimport { BaseCard } from '@jbrowse/core/BaseFeatureWidget/BaseFeatureDetail'\nimport { getLengthOnRef } from '../MismatchParser'\nimport { IAnyStateTreeNode } from 'mobx-state-tree'\nimport { navToLoc } from './util'\n\nexport default function SupplementaryAlignments(props: {\n  tag: string\n  model: IAnyStateTreeNode\n}) {\n  const { tag, model } = props\n  return (\n    <BaseCard {...props} title=\"Supplementary alignments\">\n      <Typography>List of supplementary alignment locations</Typography>\n      <ul>\n        {tag\n          .split(';')\n          .filter(SA => !!SA)\n          .map((SA, index) => {\n            const [saRef, saStart, saStrand, saCigar] = SA.split(',')\n            const saLength = getLengthOnRef(saCigar)\n            const extra = Math.floor(saLength / 5)\n            const start = +saStart\n            const end = +saStart + saLength\n            const locString = `${saRef}:${Math.max(1, start - extra)}-${\n              end + extra\n            }`\n            const displayStart = start.toLocaleString('en-US')\n            const displayEnd = end.toLocaleString('en-US')\n            const displayString = `${saRef}:${displayStart}-${displayEnd} (${saStrand}) [${saLength}bp]`\n            return (\n              <li key={`${locString}-${index}`}>\n                <Link\n                  onClick={async event => {\n                    event.preventDefault()\n\n                    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n                    navToLoc(locString, model)\n                  }}\n                  href=\"#\"\n                >\n                  {displayString}\n                </Link>\n              </li>\n            )\n          })}\n      </ul>\n    </BaseCard>\n  )\n}\n","import React from 'react'\nimport { Checkbox, FormControlLabel, FormGroup } from '@mui/material'\nimport { makeStyles } from 'tss-react/mui'\nimport {\n  BaseCard,\n  SimpleValue,\n} from '@jbrowse/core/BaseFeatureWidget/BaseFeatureDetail'\n\nconst useStyles = makeStyles()({\n  compact: {\n    paddingRight: 0,\n    paddingTop: 0,\n    paddingBottom: 0,\n  },\n})\n\nconst flagNames = [\n  'read paired',\n  'read mapped in proper pair',\n  'read unmapped',\n  'mate unmapped',\n  'read reverse strand',\n  'mate reverse strand',\n  'first in pair',\n  'second in pair',\n  'not primary alignment',\n  'read fails platform/vendor quality checks',\n  'read is PCR or optical duplicate',\n  'supplementary alignment',\n]\n\nexport default function AlignmentFlags(props: { feature: { flags: number } }) {\n  const { classes } = useStyles()\n  const { feature } = props\n  const { flags } = feature\n\n  return (\n    <BaseCard {...props} title=\"Flags\">\n      <SimpleValue name=\"Flag\" value={flags} />\n      <FormGroup>\n        {flagNames.map((name, idx) => {\n          const val = flags & (1 << idx)\n          const key = `${name}_${val}`\n          return (\n            <FormControlLabel\n              key={key}\n              control={\n                <Checkbox\n                  className={classes.compact}\n                  checked={Boolean(val)}\n                  name={name}\n                  readOnly\n                />\n              }\n              label={name}\n            />\n          )\n        })}\n      </FormGroup>\n    </BaseCard>\n  )\n}\n","import React, { useState } from 'react'\nimport { Link, Paper } from '@mui/material'\nimport { observer } from 'mobx-react'\nimport copy from 'copy-to-clipboard'\nimport clone from 'clone'\nimport { FeatureDetails } from '@jbrowse/core/BaseFeatureWidget/BaseFeatureDetail'\nimport { IAnyStateTreeNode } from 'mobx-state-tree'\n\n// locals\nimport { getTag, navToLoc } from './util'\nimport SupplementaryAlignments from './AlignmentsFeatureSuppAligns'\nimport AlignmentFlags from './AlignmentsFeatureFlags'\n\nconst omit = ['clipPos', 'flags']\n\nconst tags = {\n  AM: 'The smallest template-independent mapping quality in the template',\n  AS: 'Alignment score generated by aligner',\n  BC: 'Barcode sequence identifying the sample',\n  BQ: 'Offset to base alignment quality (BAQ)',\n  BZ: 'Phred quality of the unique molecular barcode bases in the {OX} tag',\n  CB: 'Cell identifier',\n  CC: 'Reference name of the next hit',\n  CM: 'Edit distance between the color sequence and the color reference (see also {NM})',\n  CO: 'Free-text comments',\n  CP: 'Leftmost coordinate of the next hit',\n  CQ: 'Color read base qualities',\n  CR: 'Cellular barcode sequence bases (uncorrected)',\n  CS: 'Color read sequence',\n  CT: 'Complete read annotation tag, used for consensus annotation dummy features',\n  CY: 'Phred quality of the cellular barcode sequence in the {CR} tag',\n  E2: 'The 2nd most likely base calls',\n  FI: 'The index of segment in the template',\n  FS: 'Segment suffix',\n  FZ: 'Flow signal intensities',\n  GC: 'Reserved for backwards compatibility reasons',\n  GQ: 'Reserved for backwards compatibility reasons',\n  GS: 'Reserved for backwards compatibility reasons',\n  H0: 'Number of perfect hits',\n  H1: 'Number of 1-difference hits (see also {NM})',\n  H2: 'Number of 2-difference hits',\n  HI: 'Query hit index',\n  IH: 'Query hit total count',\n  LB: 'Library',\n  MC: 'CIGAR string for mate/next segment',\n  MD: 'String encoding mismatched and deleted reference bases',\n  MF: 'Reserved for backwards compatibility reasons',\n  MI: 'Molecular identifier; a string that uniquely identifies the molecule from which the record was derived',\n  ML: 'Base modification probabilities',\n  MM: 'Base modifications / methylation ',\n  MQ: 'Mapping quality of the mate/next segment',\n  NH: 'Number of reported alignments that contain the query in the current record',\n  NM: 'Edit distance to the reference',\n  OA: 'Original alignment',\n  OC: 'Original CIGAR (deprecated; use {OA} instead)',\n  OP: 'Original mapping position (deprecated; use {OA} instead)',\n  OQ: 'Original base quality',\n  OX: 'Original unique molecular barcode bases',\n  PG: 'Program',\n  PQ: 'Phred likelihood of the template',\n  PT: 'Read annotations for parts of the padded read sequence',\n  PU: 'Platform unit',\n  Q2: 'Phred quality of the mate/next segment sequence in the {R2} tag',\n  QT: 'Phred quality of the sample barcode sequence in the {BC} tag',\n  QX: 'Quality score of the unique molecular identifier in the {RX} tag',\n  R2: 'Sequence of the mate/next segment in the template',\n  RG: 'Read group',\n  RT: 'Reserved for backwards compatibility reasons',\n  RX: 'Sequence bases of the (possibly corrected) unique molecular identifier',\n  S2: 'Reserved for backwards compatibility reasons',\n  SA: 'Other canonical alignments in a chimeric alignment',\n  SM: 'Template-independent mapping quality',\n  SQ: 'Reserved for backwards compatibility reasons',\n  TC: 'The number of segments in the template',\n  TS: 'Transcript strand',\n  U2: 'Phred probability of the 2nd call being wrong conditional on the best being wrong',\n  UQ: 'Phred likelihood of the segment, conditional on the mapping being correct',\n}\n\nfunction Formatter({ value }: { value: unknown }) {\n  const [show, setShow] = useState(false)\n  const [copied, setCopied] = useState(false)\n  const display = String(value)\n  return display.length > 100 ? (\n    <>\n      <button\n        type=\"button\"\n        onClick={() => {\n          copy(display)\n          setCopied(true)\n          setTimeout(() => setCopied(false), 700)\n        }}\n      >\n        {copied ? 'Copied to clipboard' : 'Copy'}\n      </button>\n      <button type=\"button\" onClick={() => setShow(val => !val)}>\n        {show ? 'Show less' : 'Show more'}\n      </button>\n      <div>{show ? display : `${display.slice(0, 100)}...`}</div>\n    </>\n  ) : (\n    <div>{display}</div>\n  )\n}\n\nfunction PairLink({\n  locString,\n  model,\n}: {\n  locString: string\n  model: IAnyStateTreeNode\n}) {\n  return (\n    <Link\n      onClick={event => {\n        event.preventDefault()\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        navToLoc(locString, model)\n      }}\n      href=\"#\"\n    >\n      {locString}\n    </Link>\n  )\n}\n\nexport default observer(function AlignmentFeatureDetails(props: {\n  model: IAnyStateTreeNode\n}) {\n  const { model } = props\n  const feat = clone(model.featureData)\n  const SA = getTag('SA', feat) as string\n  return (\n    <Paper data-testid=\"alignment-side-drawer\">\n      <FeatureDetails\n        {...props}\n        omit={omit}\n        // @ts-expect-error\n        descriptions={{ ...tags, tags }}\n        feature={feat}\n        formatter={(value, key) =>\n          key === 'next_segment_position' ? (\n            <PairLink model={model} locString={value as string} />\n          ) : (\n            <Formatter value={value} />\n          )\n        }\n      />\n      {SA ? <SupplementaryAlignments model={model} tag={SA} /> : null}\n      {feat.flags !== undefined ? (\n        <AlignmentFlags feature={feat} {...props} />\n      ) : null}\n    </Paper>\n  )\n})\n"],"names":["navToLoc","_x","_x2","_navToLoc","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee","locString","model","session","view","wrap","_context","prev","next","getSession","navToLocString","Error","t0","console","error","notify","concat","stop","SupplementaryAlignments","props","tag","_jsxs","BaseCard","_objectSpread","title","children","_jsx","Typography","split","filter","SA","map","index","_SA$split","_SA$split2","_slicedToArray","saRef","saStart","saStrand","saCigar","saLength","getLengthOnRef","extra","Math","floor","start","end","max","displayStart","toLocaleString","displayEnd","displayString","Link","onClick","_ref","event","preventDefault","href","useStyles","makeStyles","compact","paddingRight","paddingTop","paddingBottom","flagNames","AlignmentFlags","classes","flags","feature","SimpleValue","name","value","FormGroup","idx","val","key","FormControlLabel","control","Checkbox","className","checked","Boolean","readOnly","label","omit","tags","AM","AS","BC","BQ","BZ","CB","CC","CM","CO","CP","CQ","CR","CS","CT","CY","E2","FI","FS","FZ","GC","GQ","GS","H0","H1","H2","HI","IH","LB","MC","MD","MF","MI","ML","MM","MQ","NH","NM","OA","OC","OP","OQ","OX","PG","PQ","PT","PU","Q2","QT","QX","R2","RG","RT","RX","S2","SM","SQ","TC","TS","U2","UQ","Formatter","_useState","useState","_useState2","show","setShow","_useState3","_useState4","copied","setCopied","display","String","length","_Fragment","type","copy","setTimeout","slice","PairLink","_ref2","observer","feat","clone","featureData","_feat$tags","getTag","Paper","FeatureDetails","descriptions","formatter","undefined"],"sourceRoot":""}