{"version":3,"file":"static/js/6443.080e65cb.chunk.js","mappings":"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","sources":["../../../plugins/alignments/src/CramAdapter/CramSlightlyLazyFeature.ts","../../../plugins/alignments/src/CramAdapter/util.ts","../../../plugins/alignments/src/CramAdapter/CramAdapter.ts"],"sourcesContent":["/* eslint-disable no-underscore-dangle */\nimport {\n  Feature,\n  SimpleFeatureSerialized,\n} from '@jbrowse/core/util/simpleFeature'\nimport { CramRecord } from '@gmod/cram'\n\n// locals\nimport CramAdapter from './CramAdapter'\nimport { readFeaturesToCIGAR, readFeaturesToMismatches } from './util'\n\nexport default class CramSlightlyLazyFeature implements Feature {\n  // uses parameter properties to automatically create fields on the class\n  // https://www.typescriptlang.org/docs/handbook/classes.html#parameter-properties\n  constructor(private record: CramRecord, private _store: CramAdapter) {}\n\n  _get_name() {\n    return this.record.readName\n  }\n\n  _get_start() {\n    return this.record.alignmentStart - 1\n  }\n\n  _get_end() {\n    return this.record.alignmentStart + (this.record.lengthOnRef ?? 1) - 1\n  }\n\n  _get_cram_read_features() {\n    return this.record.readFeatures\n  }\n\n  _get_type() {\n    return 'match'\n  }\n\n  _get_score() {\n    return this.record.mappingQuality\n  }\n\n  _get_flags() {\n    return this.record.flags\n  }\n\n  _get_strand() {\n    return this.record.isReverseComplemented() ? -1 : 1\n  }\n\n  _read_group_id() {\n    const rg = this._store.samHeader.readGroups\n    return rg ? rg[this.record.readGroupId] : undefined\n  }\n\n  _get_qual() {\n    return (this.record.qualityScores || []).join(' ')\n  }\n\n  qualRaw() {\n    return this.record.qualityScores\n  }\n\n  _get_refName() {\n    return this._store.refIdToName(this.record.sequenceId)\n  }\n\n  _get_is_paired() {\n    return !!this.record.mate\n  }\n\n  _get_pair_orientation() {\n    return this.record.isPaired() ? this.record.getPairOrientation() : undefined\n  }\n\n  _get_template_length() {\n    return this.record.templateLength || this.record.templateSize\n  }\n\n  _get_next_ref() {\n    return this.record.mate\n      ? this._store.refIdToName(this.record.mate.sequenceId)\n      : undefined\n  }\n\n  _get_next_segment_position() {\n    return this.record.mate\n      ? `${this._store.refIdToName(this.record.mate.sequenceId)}:${\n          this.record.mate.alignmentStart\n        }`\n      : undefined\n  }\n\n  _get_next_pos() {\n    return this.record.mate?.alignmentStart\n  }\n\n  _get_tags() {\n    const RG = this._read_group_id()\n    const { tags } = this.record\n    // avoids a tag copy if no RG, but just copy if there is one\n    return RG !== undefined ? { ...tags, RG } : tags\n  }\n\n  _get_seq() {\n    return this.record.getReadBases()\n  }\n\n  // generate a CIGAR, based on code from jkbonfield\n  _get_CIGAR() {\n    return readFeaturesToCIGAR(\n      this.record.readFeatures,\n      this.record.alignmentStart,\n      this.record.readLength,\n      this.record._refRegion,\n    )\n  }\n\n  tags() {\n    return Object.getOwnPropertyNames(CramSlightlyLazyFeature.prototype)\n      .filter(\n        prop =>\n          prop.startsWith('_get_') &&\n          prop !== '_get_mismatches' &&\n          prop !== '_get_cram_read_features',\n      )\n      .map(methodName => methodName.replace('_get_', ''))\n  }\n\n  id() {\n    return `${this._store.id}-${this.record.uniqueId}`\n  }\n\n  get(field: string) {\n    const methodName = `_get_${field}`\n    // @ts-expect-error\n    if (this[methodName]) {\n      // @ts-expect-error\n      return this[methodName]()\n    }\n    return undefined\n  }\n\n  parent() {\n    return undefined\n  }\n\n  children() {\n    return undefined\n  }\n\n  set() {}\n\n  pairedFeature() {\n    return false\n  }\n\n  _get_clipPos() {\n    const mismatches = this.get('mismatches')\n    if (mismatches.length) {\n      const record =\n        this.get('strand') === -1\n          ? mismatches[mismatches.length - 1]\n          : mismatches[0]\n      const { type, cliplen } = record\n      if (type === 'softclip' || type === 'hardclip') {\n        return cliplen\n      }\n    }\n    return 0\n  }\n\n  toJSON(): SimpleFeatureSerialized {\n    return {\n      ...Object.fromEntries(\n        this.tags()\n          .map(t => [t, this.get(t)])\n          .filter(elt => elt[1] !== undefined),\n      ),\n      uniqueId: this.id(),\n    }\n  }\n\n  _get_mismatches() {\n    const readFeatures = this.record.readFeatures\n    const qual = this.qualRaw()\n    const start = this.get('start')\n    return readFeaturesToMismatches(readFeatures, start, qual)\n  }\n}\n","import { CramRecord } from '@gmod/cram'\n\ntype ReadFeatures = CramRecord['readFeatures']\n\nexport interface Mismatch {\n  qual?: number\n  start: number\n  length: number\n  type: string\n  base: string | undefined\n  altbase?: string\n  seq?: string\n  cliplen?: number\n}\n\nexport function readFeaturesToMismatches(\n  readFeatures: ReadFeatures,\n  start: number,\n  qual?: number[] | null,\n) {\n  if (!readFeatures) {\n    return []\n  }\n  const mismatches: Mismatch[] = new Array(readFeatures.length)\n  let j = 0\n  let insLen = 0\n  let refPos = 0\n  let sublen = 0\n  let lastPos = start\n\n  for (let i = 0; i < readFeatures.length; i++) {\n    const f = readFeatures[i]\n    const { code, pos, data, sub, ref } = f\n    sublen = refPos - lastPos\n    lastPos = refPos\n\n    if (sublen && insLen > 0) {\n      mismatches[j++] = {\n        start: refPos,\n        type: 'insertion',\n        base: `${insLen}`,\n        length: 0,\n      }\n      insLen = 0\n    }\n    refPos = f.refPos - 1 - start\n\n    if (code === 'X') {\n      // substitution\n      mismatches[j++] = {\n        start: refPos,\n        length: 1,\n        base: sub,\n        qual: qual?.[pos - 1],\n        altbase: ref?.toUpperCase(),\n        type: 'mismatch',\n      }\n    } else if (code === 'I') {\n      // insertion\n      mismatches[j++] = {\n        start: refPos,\n        type: 'insertion',\n        base: `${data.length}`,\n        length: 0,\n      }\n    } else if (code === 'N') {\n      // reference skip\n      mismatches[j++] = {\n        type: 'skip',\n        length: data,\n        start: refPos,\n        base: 'N',\n      }\n    } else if (code === 'S') {\n      // soft clip\n      const len = data.length\n      mismatches[j++] = {\n        start: refPos,\n        type: 'softclip',\n        base: `S${len}`,\n        cliplen: len,\n        length: 1,\n      }\n    } else if (code === 'P') {\n      // padding\n    } else if (code === 'H') {\n      // hard clip\n      const len = data\n      mismatches[j++] = {\n        start: refPos,\n        type: 'hardclip',\n        base: `H${len}`,\n        cliplen: len,\n        length: 1,\n      }\n    } else if (code === 'D') {\n      // deletion\n      mismatches[j++] = {\n        type: 'deletion',\n        length: data,\n        start: refPos,\n        base: '*',\n      }\n    } else if (code === 'b') {\n      // stretch of bases\n    } else if (code === 'q') {\n      // stretch of qual scores\n    } else if (code === 'B') {\n      // a pair of [base, qual]\n    } else if (code === 'i') {\n      // single-base insertion, we collect these if there are multiple in a row\n      // into a single insertion entry\n      insLen++\n    } else if (code === 'Q') {\n      // single quality value\n    }\n  }\n\n  if (sublen && insLen > 0) {\n    mismatches[j++] = {\n      start: refPos,\n      type: 'insertion',\n      base: `${insLen}`,\n      length: 0,\n    }\n    insLen = 0\n  }\n\n  return mismatches.slice(0, j)\n}\n\nexport function readFeaturesToCIGAR(\n  readFeatures: ReadFeatures,\n  alignmentStart: number,\n  readLen: number,\n  refRegion?: { seq: string; start: number },\n) {\n  let seq = ''\n  let cigar = ''\n  let op = 'M'\n  let oplen = 0\n  if (!refRegion) {\n    return ''\n  }\n\n  // not sure I should access these, but...\n  const ref = refRegion.seq\n  const refStart = refRegion.start\n  let lastPos = alignmentStart\n  let sublen = 0\n  let insLen = 0\n  if (readFeatures !== undefined) {\n    for (let i = 0; i < readFeatures.length; i++) {\n      const { code, refPos, sub, data } = readFeatures[i]\n      sublen = refPos - lastPos\n      seq += ref.slice(lastPos - refStart, refPos - refStart)\n      lastPos = refPos\n\n      if (insLen > 0 && sublen) {\n        cigar += `${insLen}I`\n        insLen = 0\n      }\n      if (oplen && op !== 'M') {\n        cigar += `${oplen}${op}`\n        oplen = 0\n      }\n      if (sublen) {\n        op = 'M'\n        oplen += sublen\n      }\n\n      if (code === 'b') {\n        // An array of bases stored verbatim\n        const ret = data.split(',')\n        const added = String.fromCharCode(...ret)\n        seq += added\n        lastPos += added.length\n        oplen += added.length\n      } else if (code === 'B') {\n        // Single base (+ qual score)\n        seq += sub\n        lastPos++\n        oplen++\n      } else if (code === 'X') {\n        // Substitution\n        seq += sub\n        lastPos++\n        oplen++\n      } else if (code === 'D' || code === 'N') {\n        // Deletion or Ref Skip\n        lastPos += data\n        if (oplen) {\n          cigar += `${oplen}${op}`\n        }\n        cigar += data + code\n        oplen = 0\n      } else if (code === 'I' || code === 'S') {\n        // Insertion or soft-clip\n        seq += data\n        if (oplen) {\n          cigar += `${oplen}${op}`\n        }\n        cigar += data.length + code\n        oplen = 0\n      } else if (code === 'i') {\n        // Single base insertion\n        // seq += data\n        if (oplen) {\n          cigar += `${oplen}${op}`\n        }\n        insLen++\n        seq += data\n        oplen = 0\n      } else if (code === 'P') {\n        // Padding\n        if (oplen) {\n          cigar += `${oplen}${op}`\n        }\n        cigar += `${data}P`\n      } else if (code === 'H') {\n        // Hard clip\n        if (oplen) {\n          cigar += `${oplen}${op}`\n        }\n        cigar += `${data}H`\n        oplen = 0\n      } // else q or Q\n    }\n  } else {\n    sublen = readLen - seq.length\n  }\n  if (seq.length !== readLen) {\n    sublen = readLen - seq.length\n    seq += ref.slice(lastPos - refStart, lastPos - refStart + sublen)\n\n    if (oplen && op !== 'M') {\n      cigar += `${oplen}${op}`\n      oplen = 0\n    }\n    op = 'M'\n    oplen += sublen\n  }\n  if (sublen && insLen > 0) {\n    cigar += `${insLen}I`\n  }\n  if (oplen) {\n    cigar += `${oplen}${op}`\n  }\n\n  return cigar\n}\n","import { CraiIndex, IndexedCramFile, CramRecord } from '@gmod/cram'\nimport {\n  BaseFeatureDataAdapter,\n  BaseOptions,\n  BaseSequenceAdapter,\n} from '@jbrowse/core/data_adapters/BaseAdapter'\nimport { checkAbortSignal, Region, Feature } from '@jbrowse/core/util'\nimport { openLocation } from '@jbrowse/core/util/io'\nimport { ObservableCreate } from '@jbrowse/core/util/rxjs'\nimport { toArray } from 'rxjs/operators'\nimport { firstValueFrom } from 'rxjs'\nimport CramSlightlyLazyFeature from './CramSlightlyLazyFeature'\n\ninterface Header {\n  idToName?: string[]\n  nameToId?: Record<string, number>\n  readGroups?: (string | undefined)[]\n}\n\ninterface FilterBy {\n  flagInclude: number\n  flagExclude: number\n  tagFilter: { tag: string; value: unknown }\n  readName: string\n}\n\nexport default class CramAdapter extends BaseFeatureDataAdapter {\n  samHeader: Header = {}\n\n  private setupP?: Promise<{\n    samHeader: Header\n    cram: IndexedCramFile\n    sequenceAdapter: BaseSequenceAdapter\n  }>\n\n  private configureP?: Promise<{\n    cram: IndexedCramFile\n    sequenceAdapter: BaseSequenceAdapter\n  }>\n\n  // maps a refname to an id\n  private seqIdToRefName: string[] | undefined\n\n  // maps a seqId to original refname, passed specially to render args, to a seqid\n  private seqIdToOriginalRefName: string[] = []\n\n  public async configurePre() {\n    const cramLocation = this.getConf('cramLocation')\n    const craiLocation = this.getConf('craiLocation')\n    if (!cramLocation) {\n      throw new Error('missing cramLocation argument')\n    }\n    if (!craiLocation) {\n      throw new Error('missing craiLocation argument')\n    }\n    const pm = this.pluginManager\n\n    const cram = new IndexedCramFile({\n      cramFilehandle: openLocation(cramLocation, pm),\n      index: new CraiIndex({ filehandle: openLocation(craiLocation, pm) }),\n      seqFetch: (...args) => this.seqFetch(...args),\n      checkSequenceMD5: false,\n      fetchSizeLimit: 200_000_000, // just make this a large size to avoid hitting it\n    })\n\n    if (!this.getSubAdapter) {\n      throw new Error('Error getting subadapter')\n    }\n\n    const seqConf = this.getConf('sequenceAdapter')\n    const subadapter = await this.getSubAdapter(seqConf)\n\n    return {\n      cram,\n      sequenceAdapter: subadapter.dataAdapter as BaseSequenceAdapter,\n    }\n  }\n\n  public async configure() {\n    if (!this.configureP) {\n      this.configureP = this.configurePre().catch(e => {\n        this.configureP = undefined\n        throw e\n      })\n    }\n    return this.configureP\n  }\n\n  async getHeader(opts?: BaseOptions) {\n    const { cram } = await this.configure()\n    return cram.cram.getHeaderText()\n  }\n\n  private async seqFetch(\n    seqId: number,\n    start: number,\n    end: number,\n  ): Promise<string> {\n    start -= 1 // convert from 1-based closed to interbase\n\n    const { sequenceAdapter } = await this.configure()\n    const refName = this.refIdToOriginalName(seqId) || this.refIdToName(seqId)\n    if (!refName) {\n      throw new Error('unknown')\n    }\n\n    const seqChunks = await firstValueFrom(\n      sequenceAdapter\n        .getFeatures({\n          refName,\n          start,\n          end,\n          assemblyName: '',\n        })\n        .pipe(toArray()),\n    )\n\n    const sequence = seqChunks\n      .sort((a, b) => a.get('start') - b.get('start'))\n      .map(chunk => {\n        const chunkStart = chunk.get('start')\n        const chunkEnd = chunk.get('end')\n        const trimStart = Math.max(start - chunkStart, 0)\n        const trimEnd = Math.min(end - chunkStart, chunkEnd - chunkStart)\n        const trimLength = trimEnd - trimStart\n        const chunkSeq = chunk.get('seq') || chunk.get('residues')\n        return chunkSeq.slice(trimStart, trimStart + trimLength)\n      })\n      .join('')\n\n    if (sequence.length !== end - start) {\n      throw new Error(\n        `sequence fetch failed: fetching ${refName}:${(\n          start - 1\n        ).toLocaleString()}-${end.toLocaleString()} returned ${sequence.length.toLocaleString()} bases, but should have returned ${(\n          end - start\n        ).toLocaleString()}`,\n      )\n    }\n    return sequence\n  }\n\n  private async setupPre(opts?: BaseOptions) {\n    const { statusCallback = () => {} } = opts || {}\n    const conf = await this.configure()\n    statusCallback('Downloading index')\n    const { cram } = conf\n    const samHeader = await cram.cram.getSamHeader()\n\n    // use the @SQ lines in the header to figure out the\n    // mapping between ref ID numbers and names\n    const idToName: string[] = []\n    const nameToId: Record<string, number> = {}\n    samHeader\n      .filter(l => l.tag === 'SQ')\n      .forEach((sqLine, refId) => {\n        sqLine.data.forEach(item => {\n          if (item.tag === 'SN') {\n            // this is the ref name\n            const refName = item.value\n            nameToId[refName] = refId\n            idToName[refId] = refName\n          }\n        })\n      })\n\n    const readGroups = samHeader\n      .filter(l => l.tag === 'RG')\n      .map(rgLine => rgLine.data.find(item => item.tag === 'ID')?.value)\n\n    const data = { idToName, nameToId, readGroups }\n    statusCallback('')\n    this.samHeader = data\n    return { samHeader: data, ...conf }\n  }\n\n  private async setup(opts?: BaseOptions) {\n    if (!this.setupP) {\n      this.setupP = this.setupPre(opts).catch(e => {\n        this.setupP = undefined\n        throw e\n      })\n    }\n    return this.setupP\n  }\n\n  async getRefNames(opts?: BaseOptions) {\n    const { samHeader } = await this.setup(opts)\n    if (!samHeader.idToName) {\n      throw new Error('CRAM file has no header lines')\n    }\n    return samHeader.idToName\n  }\n\n  // use info from the SAM header if possible, but fall back to using\n  // the ref seq order from when the browser's refseqs were loaded\n  refNameToId(refName: string) {\n    if (this.samHeader.nameToId) {\n      return this.samHeader.nameToId[refName]\n    }\n    if (this.seqIdToRefName) {\n      return this.seqIdToRefName.indexOf(refName)\n    }\n    return undefined\n  }\n\n  // use info from the SAM header if possible, but fall back to using\n  // the ref seq order from when the browser's refseqs were loaded\n  refIdToName(refId: number) {\n    return this.samHeader.idToName?.[refId] || this.seqIdToRefName?.[refId]\n  }\n\n  refIdToOriginalName(refId: number) {\n    return this.seqIdToOriginalRefName[refId]\n  }\n\n  getFeatures(\n    region: Region & { originalRefName?: string },\n    opts?: BaseOptions & {\n      filterBy: FilterBy\n    },\n  ) {\n    const { signal, filterBy, statusCallback = () => {} } = opts || {}\n    const { refName, start, end, originalRefName } = region\n\n    return ObservableCreate<Feature>(async observer => {\n      const { cram } = await this.setup(opts)\n\n      const refId = this.refNameToId(refName)\n      if (refId === undefined) {\n        console.warn('Unknown refName', refName)\n        observer.complete()\n        return\n      }\n\n      if (originalRefName) {\n        this.seqIdToOriginalRefName[refId] = originalRefName\n      }\n      statusCallback('Downloading alignments')\n      const records = await cram.getRecordsForRange(refId, start, end)\n      checkAbortSignal(signal)\n      const {\n        flagInclude = 0,\n        flagExclude = 0,\n        tagFilter,\n        readName,\n      } = filterBy || {}\n\n      let filtered = records.filter(record => {\n        const flags = record.flags\n        return (flags & flagInclude) === flagInclude && !(flags & flagExclude)\n      })\n\n      if (tagFilter) {\n        filtered = filtered.filter(record => {\n          // @ts-expect-error\n          const val = record[tagFilter.tag]\n          return val === '*' ? val !== undefined : val === tagFilter.value\n        })\n      }\n\n      if (readName) {\n        filtered = filtered.filter(record => record.readName === readName)\n      }\n\n      filtered.forEach(record => {\n        observer.next(this.cramRecordToFeature(record))\n      })\n      statusCallback('')\n      observer.complete()\n    }, signal)\n  }\n\n  freeResources(/* { region } */): void {}\n\n  cramRecordToFeature(record: CramRecord) {\n    return new CramSlightlyLazyFeature(record, this)\n  }\n\n  // we return the configured fetchSizeLimit, and the bytes for the region\n  async getMultiRegionFeatureDensityStats(\n    regions: Region[],\n    opts?: BaseOptions,\n  ) {\n    const bytes = await this.bytesForRegions(regions, opts)\n    const fetchSizeLimit = this.getConf('fetchSizeLimit')\n    return {\n      bytes,\n      fetchSizeLimit,\n    }\n  }\n\n  /**\n   * get the approximate number of bytes queried from the file for the given\n   * query regions\n   * @param regions - list of query regions\n   */\n  private async bytesForRegions(regions: Region[], _opts?: BaseOptions) {\n    const { cram } = await this.configure()\n    const blockResults = await Promise.all(\n      regions.map(region => {\n        const { refName, start, end } = region\n        const chrId = this.refNameToId(refName)\n        return chrId !== undefined\n          ? cram.index.getEntriesForRange(chrId, start, end)\n          : [{ sliceBytes: 0 }]\n      }),\n    )\n\n    return blockResults.flat().reduce((a, b) => a + b.sliceBytes, 0)\n  }\n}\n"],"names":["CramSlightlyLazyFeature","record","_store","_classCallCheck","_createClass","key","value","this","readName","alignmentStart","_this$record$lengthOn","lengthOnRef","readFeatures","mappingQuality","flags","isReverseComplemented","rg","samHeader","readGroups","readGroupId","undefined","qualityScores","join","refIdToName","sequenceId","mate","isPaired","getPairOrientation","templateLength","templateSize","concat","_this$record$mate","RG","_read_group_id","tags","_objectSpread","getReadBases","readLen","refRegion","seq","cigar","op","oplen","ref","refStart","start","lastPos","sublen","insLen","i","length","_readFeatures$i","code","refPos","sub","data","slice","ret","split","added","String","fromCharCode","apply","_toConsumableArray","readFeaturesToCIGAR","readLength","_refRegion","Object","getOwnPropertyNames","prototype","filter","prop","startsWith","map","methodName","replace","id","uniqueId","field","mismatches","get","type","cliplen","_this","fromEntries","t","elt","qual","qualRaw","Array","j","f","pos","base","altbase","toUpperCase","len","readFeaturesToMismatches","CramAdapter","_BaseFeatureDataAdapt","_inherits","_super","_createSuper","_len","arguments","args","_key","call","setupP","configureP","seqIdToRefName","seqIdToOriginalRefName","_configurePre","_asyncToGenerator","_regeneratorRuntime","mark","_callee","cramLocation","craiLocation","pm","cram","seqConf","subadapter","_this2","wrap","_context","prev","next","getConf","Error","pluginManager","IndexedCramFile","cramFilehandle","openLocation","index","CraiIndex","filehandle","seqFetch","checkSequenceMD5","fetchSizeLimit","getSubAdapter","sent","abrupt","sequenceAdapter","dataAdapter","stop","_configure","_callee2","_this3","_context2","configurePre","catch","e","_getHeader","_callee3","opts","_yield$this$configure","_context3","configure","getHeaderText","_x","_seqFetch","_callee4","seqId","end","_yield$this$configure2","refName","seqChunks","sequence","_context4","refIdToOriginalName","firstValueFrom","getFeatures","assemblyName","pipe","toArray","sort","a","b","chunk","chunkStart","chunkEnd","trimStart","Math","max","trimLength","min","toLocaleString","_x2","_x3","_x4","_setupPre","_callee5","_ref$statusCallback","statusCallback","conf","idToName","nameToId","_context5","getSamHeader","l","tag","forEach","sqLine","refId","item","rgLine","_rgLine$data$find","find","_x5","_setup","_callee6","_this4","_context6","setupPre","_x6","_getRefNames","_callee7","_yield$this$setup","_context7","setup","_x7","indexOf","_this$samHeader$idToN","_this$seqIdToRefName","region","_this5","_ref2","signal","filterBy","_ref2$statusCallback","originalRefName","ObservableCreate","_ref3","_callee8","observer","_yield$_this5$setup","records","_ref4","_ref4$flagInclude","flagInclude","_ref4$flagExclude","flagExclude","tagFilter","filtered","_context8","refNameToId","console","warn","complete","getRecordsForRange","checkAbortSignal","val","cramRecordToFeature","_x8","_getMultiRegionFeatureDensityStats","_callee9","regions","bytes","_context9","bytesForRegions","_x9","_x10","_bytesForRegions","_callee10","_opts","_yield$this$configure3","blockResults","_this6","_context10","Promise","all","chrId","getEntriesForRange","sliceBytes","flat","reduce","_x11","_x12","BaseFeatureDataAdapter"],"sourceRoot":""}