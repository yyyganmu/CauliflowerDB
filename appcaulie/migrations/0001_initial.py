# Generated by Django 4.2.8 on 2024-02-27 02:21

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Features',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('geneid', models.CharField(max_length=20)),
                ('mrnaseq', models.TextField()),
                ('cdsseq', models.TextField()),
                ('proteinseq', models.TextField()),
            ],
            options={
                'db_table': 'features',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='GeneAndUpstream',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('geneid', models.CharField(max_length=20)),
                ('geneseq', models.TextField()),
                ('upseq', models.TextField()),
            ],
            options={
                'db_table': 'gene_and_upstream',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Geneanno',
            fields=[
                ('seqid', models.CharField(max_length=10)),
                ('source', models.CharField(max_length=15)),
                ('type', models.CharField(max_length=25)),
                ('start', models.IntegerField()),
                ('end', models.IntegerField()),
                ('strand', models.CharField(max_length=1)),
                ('phase', models.CharField(max_length=1)),
                ('attributes', models.CharField(max_length=255, primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'geneanno',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Geneinfo',
            fields=[
                ('chromosome', models.CharField(max_length=10)),
                ('start', models.IntegerField()),
                ('end', models.IntegerField()),
                ('strand', models.CharField(max_length=1)),
                ('id', models.CharField(max_length=20, primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'geneinfo',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Sampleinfo',
            fields=[
                ('sampleid', models.CharField(max_length=50, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50)),
                ('clade', models.CharField(max_length=10)),
                ('group', models.CharField(max_length=10)),
                ('taxonomy', models.CharField(max_length=50)),
            ],
            options={
                'db_table': 'sampleinfo',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Targets',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('chrom', models.CharField(max_length=10)),
                ('strand', models.CharField(max_length=5)),
                ('start', models.IntegerField()),
                ('end', models.IntegerField()),
                ('ptype', models.CharField(max_length=10)),
                ('pam', models.CharField(max_length=10)),
                ('cleavage', models.CharField(max_length=30)),
                ('ofgene', models.CharField(max_length=20)),
                ('ifcds', models.CharField(max_length=10)),
                ('specific', models.DecimalField(decimal_places=2, max_digits=5)),
                ('offtargets', models.IntegerField()),
                ('seq', models.CharField(max_length=50)),
            ],
            options={
                'db_table': 'targets',
                'managed': True,
            },
        ),
    ]
